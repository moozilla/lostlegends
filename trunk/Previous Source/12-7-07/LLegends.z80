;Code conventions:
;routinename + number for sub labels
;p_name and b_name for pointers and buffer pointers
 	.nolist
#include "spasm.inc"
	.list

defpage(0,"LLegends")
 
Tile_width = 2
Map_Entry_Size = 1
MAP_MASK = $ff
PMAPWIDTH = 6
PMAPHIEGHT = 5

#define INCLUDEMAPPER
#define APP
#define INCLUDERGP
#define AllocStart $9d95

#include "grayapp.inc"

;#include "Graymapper.inc"



;NOTE:  You must allocate some memory for the mapper(see below)

	jp start

appPutS:						; appsafe _PutS
	ld a,(hl)
	inc hl
	or a
	ret z
	bcall(_PutC)
	jr appPutS
;USE FOR BCALLING ROUTINES
;pagedcallname: 
; .dw address_of_routine
; .db address_of_routine>>16
;USE FOR BCALLING ROUTINES

start:
	ld hl,$0004
	ld (delta),hl

	bcall(_ClrLCDFull)
	ld hl,$0000
	ld (CurRow),hl
	ld hl,myString
	call appPutS
	bcall(_getKey)

	ld hl,AllocSize
	bcall(_EnoughMem)
	jr nc, Go
	bjump(_JForceCmdNoChar)
myString:
	.db "Lost Legends",0
Go:	
	ld de,$9d95
	ld hl,AllocSize
	bcall(_InsertMem)

	
	call GSenable
	
	ld a,2			;grayscale has 2 layers, light and dark
	ld (Num_Layers),a

	ld hl,30			;This is my map width, change to your map width
	ld (Mapwidth),hl

	ld hl,0			;These are the coords in PIXELS from where to draw the map
	ld (MapY),hl
	ld (MapX),hl


	ld hl,tileData
	ld (Tileptr),hl		;this is where the TILES are located

	ld hl,mapData
	ld (MAPptr),hl		;This is the map location

	ld hl,mapbuf1
	ld (MapbufPtr),hl		; Map buffer memory (SEE NOTE BELOW)

	ld hl,PreMap
	ld (PreMapPTR),hl		;premap Memory (see note below)


	call DrawMapFull		;You must intiallizethe buffer once before gameplay



Loop:
	call updatemap		;every time you update coord update the map

;------------------------
;You must copy the map buffer to GBUFs
; but first you must find where to copy from
; This is the simple way to calculate the offset to copy from

	ld a,(MapY)
	and (8*Tile_width)-1
	ld h,a
	ld e,PMAPWIDTH*Tile_width
	call HxE

	push hl
	ld de,Mapbuf1	;add the offset to mapbuf1
	add hl,de
	ld de,gbuf1
	ld bc,768
	call quickcopy	;copy it to gbuf1 so you can draw on it
	pop hl

	ld de,Mapbuf2	;now add the offset to mapbuf2
	add hl,de
	ld de,gbuf2
	ld bc,768
	call quickcopy	;copy it

;HERE IS where you would draw sprites

	ld hl, $0B06
	ld (CurRow),hl
	ld a,1
	call customPutC
	set textinverse,(iy + textflags)
	ld a,%00000001
	call customPutC
	res textinverse,(iy + textflags)
	set textscrolled,(iy + textflags)
	ld a,%00000001
	call customPutC
	res textscrolled,(iy + textflags)

	call gsCopybuffer	;now display it
	


Keyloop:
	nop
	nop
	ld a,$FF
	out (1),a
	nop
	nop
	nop
	nop
	ld a,$80
	out (1),a
	nop
	nop
	nop
	nop
	nop
	nop
	in a,(1)
	inc a
	jr z,Keyloop
	ld a,$FF
	out (1),a
	nop
	nop
	nop
	nop
	ld a,$FE
	out (1),a
	nop
	nop
	nop
	nop
	nop
	nop
	in a,(1)
	bit 0,a
	call z,down
	bit 1,a
	call z,left
	bit 2,a
	call z,right
	bit 3,a
	call z,up

	ld a,$FF
	out (1),a
	nop
	nop
	nop
	nop
	ld a,$BF
	out (1),a
	nop
	nop
	nop
	nop
	nop
	nop
	in a,(1)
	ld hl,(delta)	;this just changes  the scroll speed with the F keys
	bit 0,a
	jr nz,$+2+3
	ld hl,8
	bit 1,a
	jr nz,$+2+3
	ld hl,6
	bit 2,a
	jr nz,$+2+3
	ld hl,4
	bit 3,a
	jr nz,$+2+3
	ld hl,2
	bit 4,a
	jr nz,$+2+3
	ld hl,1
	ld (delta),hl

	bit 5,a			;2nd turns SE speed on
	jr nz,skipspeedon
	in a,(2)
	rla
	jr nc,skipspeedon
	ld a,1
	out ($20),a
	ld a,$FF
skipspeedon:
	bit 6,a			;mode turns SE speed off
	jr nz,skipspeedoff
	in a,(2)
	rla
	jr nc,skipspeedoff
	xor a
	out ($20),a
	ld a,$FF
skipspeedoff:

	ld a,$FF
	out (1),a
	ld a,$FD
	out (1),a
	nop
	nop
	in a,(1)
	bit 6,a			;CLEAR = quit
	jp nz,loop
	call GSdisable
	
	ld hl,$9d95
	ld de,AllocSize
	bcall(_DelMem)	
	
	bjump(_JForceCmdNoChar)


down:
	ld hl,(mapY)	
	ld de,(delta)
	add hl,de
	
	ld bc,256
	or a
	sbc hl,bc
	add hl,bc
	jr c,down2 
	ld hl,256
down2:	
	ld (mapY),hl
	ret
up:
	ld hl,(mapY)
	ld de,(delta)
	or a
	sbc hl,de
	
	ld bc,256
	or a
	sbc hl,bc
	add hl,bc
	jr c,up2 
	ld hl,$0000
up2:		
	ld (mapY),hl
	ret
right:
	ld hl,(mapx)
	ld de,(delta)eez, my 
	add hl,de
	
	ld bc,384
	or a
	sbc hl,bc
	add hl,bc
	jr c,right2 
	ld hl,384
right2:	
	ld (mapx),hl
	ret
left:
	ld hl,(mapx)
	ld de,(delta)
	or a
	sbc hl,de
	
	ld bc,384
	or a
	sbc hl,bc
	add hl,bc
	jr c,left2 
	ld hl,$0000
left2:	
	ld (mapx),hl
	ret

#include "customfont.z80"

;----------
;quick copy
;copies from hl to de for bc quickly
;hl source
;de destination
;bc bytes to copy (MUST BE ROUND WITH 16)
;basically a fster ldir
quickcopy:
	ldi \ ldi \ ldi \ ldi
	ldi \ ldi \ ldi \ ldi
	ldi \ ldi \ ldi \ ldi
	ldi \ ldi \ ldi \ ldi
	jp pe,quickcopy
	ret

#comment
#include "graylib2.inc"
#include "Graymapper.inc"		;see you include here to

#define AllocStart

;RGP ram
gsmasknum	= $9d95
GSapppage	= gsmasknum + 1
skip83	= GSapppage + 1
stacksave	= skip83 + 1
gs_keymem	= stacksave + 2
frame_count	= gs_keymem + 1
gsTempSprite = frame_count + 1
gsTempSprite2 = gsTempSprite 
gsActivebuf1  = gsTempSprite + 16
gsActivebuf2  = gsActivebuf1 + 768
gsRamEnd	  = gsActivebuf2 + 768
GsRamSize	  = gsRamEnd - gsmasknum

PreMap	= gsRamEnd
Mapbuf1	= PreMap + PREMAPBUFSIZE
Mapbuf2	= Mapbuf1 + PMAPBUFSIZE
MapperRam	= Mapbuf2 + PMAPBUFSIZE
MapRamEnd	= MapperRam + MapperRamSize




AllocSize	= gsRamEnd - PreMap

#endcomment

#include "grayapp.inc"

.echo "to allocate:", AllocSize



delta:
 .dw 2

;data goes here
tileData:
;tile 0 nothing
	.dw $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
	.dw $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
;tile 1 grass
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$31,$00,$0A,$00,$0A,$40,$02,$08,$00,$0A,$00,$08,$00,$00,$80,$00,$50,$00,$40,$40,$00,$20,$03,$24,$00,$A0,$00,$00
;tile 2 flowers
	.db $00,$00,$01,$80,$02,$40,$02,$70,$07,$48,$09,$C8,$09,$78,$06,$20,$02,$20,$01,$C0,$38,$40,$5C,$8E,$06,$98,$06,$B0,$03,$E0,$00,$00
	.db $00,$00,$00,$00,$01,$80,$01,$80,$00,$B0,$06,$30,$06,$80,$01,$C0,$01,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;tile 3 sand
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $02,$02,$88,$88,$20,$20,$02,$02,$00,$00,$08,$08,$41,$41,$00,$00,$02,$02,$88,$88,$20,$20,$02,$02,$00,$00,$08,$08,$41,$41,$00,$00
;tile 4 water
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $FC,$FC,$71,$71,$07,$07,$F2,$F2,$F8,$F8,$07,$07,$9F,$9F,$EC,$EC,$FC,$FC,$71,$71,$07,$07,$F2,$F2,$F8,$F8,$07,$07,$9F,$9F,$EC,$EC
;tile 5 tree
	.db $01,$80,$02,$40,$04,$60,$18,$38,$60,$5E,$00,$7C,$34,$30,$18,$50,$10,$2C,$64,$66,$28,$3E,$11,$98,$62,$FC,$0E,$C0,$02,$F0,$01,$F8
	.db $00,$00,$40,$80,$00,$82,$01,$C0,$11,$A0,$0A,$A0,$00,$58,$00,$30,$04,$9C,$09,$9E,$10,$E0,$02,$78,$0D,$08,$31,$40,$03,$6C,$03,$80
;tile 6 deadtree
	.db $01,$00,$00,$80,$08,$C2,$08,$C6,$04,$AA,$85,$B4,$C3,$88,$41,$30,$33,$22,$4E,$3C,$30,$70,$0C,$C0,$04,$C0,$08,$60,$0A,$7C,$15,$F8
	.db $00,$00,$00,$00,$00,$00,$00,$00,$08,$04,$02,$00,$00,$34,$00,$48,$40,$44,$00,$40,$02,$88,$00,$00,$00,$00,$C2,$98,$21,$1E,$A2,$7C
;tile 7 rock
	.db $01,$F0,$03,$18,$0C,$04,$10,$12,$24,$1A,$63,$29,$C3,$8F,$84,$43,$84,$21,$C8,$23,$F8,$33,$F0,$3F,$70,$5E,$78,$DF,$1F,$FF,$0F,$FE
	.db $01,$F0,$03,$98,$0E,$0C,$1E,$0E,$32,$26,$60,$47,$C4,$41,$88,$03,$D8,$03,$B8,$11,$88,$4F,$D0,$41,$58,$E3,$77,$66,$18,$8C,$0F,$F9
;tile 8 crystal
	.db $00,$80,$01,$40,$02,$20,$FA,$20,$8A,$27,$86,$29,$86,$31,$83,$69,$43,$4E,$21,$F4,$11,$98,$79,$16,$47,$22,$47,$22,$25,$CC,$00,$00
	.db $00,$00,$00,$00,$00,$00,$01,$40,$00,$C0,$08,$80,$09,$48,$7C,$86,$0C,$A0,$06,$08,$0E,$00,$00,$08,$08,$50,$08,$D0,$1A,$20,$1F,$FC
;tile 9 mountain
	.db $01,$00,$02,$80,$0A,$80,$14,$D0,$14,$F0,$10,$68,$20,$68,$20,$48,$20,$44,$44,$44,$44,$04,$C0,$12,$88,$17,$68,$16,$19,$3C,$06,$E0
	.db $01,$00,$02,$80,$0A,$80,$14,$D0,$14,$F0,$12,$F8,$22,$F8,$2E,$D8,$2C,$DC,$4D,$CC,$5D,$CC,$D9,$DE,$B9,$FF,$7B,$FE,$1B,$FC,$07,$E0
;tile 10chest
	.db $FF,$FF,$80,$01,$9E,$79,$92,$49,$92,$49,$92,$49,$9E,$79,$80,$01,$80,$01,$FF,$FF,$9D,$B9,$9D,$B9,$9C,$39,$9F,$F9,$80,$01,$FF,$FF
	.db $FF,$FF,$80,$01,$9E,$79,$9E,$79,$9E,$79,$9E,$79,$9E,$79,$80,$01,$80,$01,$FF,$FF,$D5,$AB,$D5,$AB,$D4,$2B,$DF,$FB,$C0,$03,$FF,$FF
;tile 11door
	.db $07,$E0,$10,$00,$20,$04,$40,$42,$44,$C2,$07,$F0,$8F,$F9,$9F,$F9,$9F,$F9,$9F,$F9,$B8,$1D,$BF,$FD,$B0,$0D,$BF,$FD,$A0,$05,$BF,$FD
	.db $07,$E0,$1F,$F8,$30,$04,$60,$46,$66,$E2,$47,$F0,$CF,$FD,$DF,$FD,$DF,$FD,$DF,$FD,$FF,$FD,$FF,$FD,$FF,$FD,$FF,$FD,$FF,$FD,$FF,$FD


mapData:
	.db 09,09,09,09,09,09, 09,09,06,09,09,09, 01,05,05,06,05,01, 09,09,00,00,00,09, 09,01,01,09,05,01
	.db 05,09,11,09,05,09, 09,09,09,10,09,06, 05,05,01,02,02,06, 05,05,00,00,00,05, 01,09,06,01,09,09
	.db 09,09,01,00,00,05, 09,09,01,01,10,09, 05,01,00,00,00,00, 00,00,00,00,00,00, 00,00,00,00,01,09
	.db 09,00,01,01,00,05, 09,06,01,06,09,09, 05,02,00,00,01,06, 05,05,00,00,00,05, 06,00,00,00,00,06
	
	.db 05,00,00,01,00,06, 09,09,01,09,06,09, 05,00,00,00,00,05, 05,06,00,00,01,06, 05,00,00,00,00,05
	.db 01,05,00,01,00,05, 09,06,01,01,01,09, 05,00,00,00,00,06, 05,01,00,00,01,01, 01,00,06,05,00,06
	.db 05,00,01,00,05,01, 09,09,09,09,01,09, 06,01,00,00,01,05, 05,05,01,00,01,06, 05,00,00,00,00,05
	.db 05,00,00,00,00,06, 09,00,00,00,00,09, 05,01,00,01,05,01, 06,01,00,00,00,05, 05,06,00,05,01,06
	
	.db 09,03,03,03,03,09, 09,03,03,03,03,09, 06,00,00,01,06,05, 09,03,03,03,03,09, 06,05,01,06,00,05
	.db 09,03,03,03,03,09, 09,03,03,03,03,09, 05,05,01,06,05,06, 09,03,03,03,03,09, 05,02,00,00,02,06
	.db 09,09,03,03,09,09, 09,09,03,03,09,09, 06,05,11,05,06,01, 09,09,03,03,09,09, 06,01,02,10,01,05
	.db 09,09,04,04,09,04, 09,09,04,04,09,09, 01,05,05,06,05,05, 09,09,04,04,09,09, 06,05,05,06,05,06
	
	.db 04,07,04,04,07,04, 07,07,04,04,07,07, 08,08,04,08,07,08, 04,07,04,04,07,07, 07,08,07,07,08,07
	.db 07,08,03,03,08,07, 07,03,03,03,03,07, 04,04,08,07,11,07, 08,03,03,03,03,03, 03,03,03,03,00,08
	.db 08,03,03,03,07,08, 08,03,07,03,03,08, 04,08,04,08,03,08, 07,08,03,03,08,03, 03,03,03,03,08,07
	.db 07,03,08,07,03,08, 07,03,03,03,03,07, 08,04,08,07,03,07, 07,04,07,07,04,07, 08,03,08,08,07,04
	
	.db 08,03,07,08,03,08, 08,03,03,03,03,07, 07,08,08,08,03,07, 04,08,08,07,07,08, 07,03,08,07,08,04
	.db 07,03,03,08,03,03, 03,03,03,07,03,03, 03,03,08,08,03,08, 08,03,03,03,03,00, 00,03,03,03,03,08
	.db 08,03,03,03,03,08, 08,03,03,03,03,08, 07,03,03,03,03,03, 03,03,03,03,08,07, 08,03,08,03,08,04
	.db 04,08,08,08,08,04, 04,07,08,07,07,04, 08,08,08,07,08,07, 07,08,07,08,04,07, 07,08,07,08,07,08
	
.block ($8000-$)-96			; 96 for signature

validate()