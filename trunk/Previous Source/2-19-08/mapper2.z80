;mapper2.z80
;by Jason Lee (Liazon)
;===============================================
;new rewrite using new map system
;As always, $0000 is null
;
;struct{
;boolean impassable
;byte:7 tilenumber
;}tileEntry
;
;struct{
;tileEntry map[6][4]  //that's [x][y]
;word {up, down, left, right} //pointer to up, down, left, right nodes respectively
;//object space
;byte num_Objects //number of object entries following this
;}mapNode

;draw6x4map
;by Jason Lee (Liazon)
;=====================================================
;draws the mapWxmapH (6x4) map of 16x16 tiles @ NBmap to the backbuffers
;equates are as defined in the .inc
;at the section labeled "LOOK AT ME!" the MSB is masked out so that it can be used for hit detection
draw6x4map:
	ld ix,NBmap
	ld hl,gbuf1		;dark layer
	ld b,mapH		;4 rows
draw6x4map_outer:
	push bc
	ld b,mapW		;6 columns
draw6x4map_inner:
	push bc
	push hl			;save dark layer address
	push hl			;save dark layer address again
	ld de,64		;each tile has 64 bytes O_O
	ld a,(ix)
	call DExA		;hl has offset to the start of the tile of interest
	ld de,mapperTiles		;tiles base
	add hl,de		;hl has pointer to tile to be rendered
	ex de,hl		;de has pointer to tile to be rendered
	pop hl			;restore screen address for darklayer
	ld b,16
draw6x4map_dark:
	ld a,(de)		;1st byte
	ld (hl),a
	inc de
	inc hl
	ld a,(de)
	ld (hl),a		;second byte
	inc de
	ld a,b			;store counter
	ld bc,11
	add hl,bc		;next row on screen
	ld b,a			;restore counter
	djnz draw6x4map_dark
	ld bc,-12 * 16 + gbuf2 - gbuf1		;find place on light layer, which is negative difference between two buffers, minus rows already down
	add hl,bc
	ld b,16
draw6x4map_light:
	ld a,(de)		;1st byte
	ld (hl),a
	inc de
	inc hl
	ld a,(de)
	ld (hl),a		;second byte
	inc de
	ld a,b			;store counter
	ld bc,11
	add hl,bc		;next row on screen
	ld b,a			;restore counter
	djnz draw6x4map_light
	pop hl			;restore original dark layer address and add 2 to get the next location in the row
	inc hl
	inc hl
	inc ix 			;update ix to point to next map entry
	pop bc			;restore counter
	djnz draw6x4map_inner
	ld de,12 * 15	;one less because of hl will end up on the next row of bytes
	add hl,de		;address on darklayer for next row of tiles to screen
	pop bc			;restore counter
	djnz draw6x4map_outer
	ret				;exit here almost forgot it XD

;From Sigma's ASMin28
;outputs: b = 0; de destroyed; a destroyed
DExA:			;hl = de x a
	ld hl,0		;use hl to store product
	ld b,8		;8 bits to check
DExA_Loop:
	rrca		;check lsb of a
	jr nc, DExA_Skip	;if 0, skip add
	add hl,de
DExA_skip
	sla e		;shift de 1 bit left
	rl d
	djnz DExA_Loop
	ret
	
#include "tiles.inc"
