
;Code conventions:
;routinename + number for sub labels
;p_name and b_name for pointers and buffer pointers
 	.nolist
#include "ti83plus.inc"
#include "app.inc"
#include "LLegends.inc"
	.list

.echo > breakpoints.brk "\n"
#define break() .echo >> breakpoints.brk $
#define DOFRAMECOUNT		;activates a counter in case you want one

defpage(0,"LLegends")
	jp start
;USE FOR BCALLING ROUTINES
;pagedcallname: 
; .dw address_of_routine
; .db address_of_routine>>16
;USE FOR BCALLING ROUTINES
start:
;========================================
;READ NOTES FOR ENTRY/EXIT INSTRUCTIONS!!
;========================================
	bcall(_ClrLCDFull)
	ld hl,AllocSize
	bcall(_EnoughMem)	;check if enough RAM for RGP allocation
	jr nc, start2
	bjump(_JForceCmdNoChar)		;exit if not enough
start2:
	ld de,$9d95
	ld hl,AllocSize
	bcall(_InsertMem)		;allocate RAM for RGP
	call GSenable			;turn on grayscale
	call gsclearbuffer
	ld hl,$00
	ld (currow),hl
	ld hl,mystring
	call appPutS
	call gscopybuffer
	call keyget

	ld de,grendale_castle_0x0
	call mapDatatoRAM
	call draw6x4map
	ld ix,chardown + 64
	ld hl,chardown
	ld (gs16maskedsprite),hl
	ld a,5
	ld (px),a
	xor a
	ld (py),a
	ld hl,NBmap
	call calcctile
	ld l,0
	ld a,16 * 5
	ld b,16
	call gs16masked
	call gscopybuffer
loop:
	call keyget
	bit b_yequal,a
	jp z,exit
	call haltdraw
	call Nspritemov
#comment
	bit b_down,a
	call z,down
	bit b_up,a
	call z,up
	bit b_left,a
	call z,left
	bit b_right,a
	call z,right
#endcomment
	jp loop
#comment	
left:
	ld b,6
left2:
	push bc
	ld a,b
	dec a
	set 5,a
	call scrollmap
	call draw6x4map
	call gscopybuffer
	pop bc
	djnz left2
	ld de,(NBleft)
	call mapDatatoRam
	xor a
	dec a
	ret
right:
	ld b,6
right2:
	push bc
	ld a,6
	sub b
	call scrollmap
	call draw6x4map
	call gscopybuffer
	pop bc
	djnz right2
	ld de,(NBright)
	call mapDatatoRam
	xor a
	dec a
	ret
up:
	ld b,4
up2:
	push bc
	ld a,b
	dec a
	sla a
	ld e,a
	sla a
	add a,e
	set 7,a
	call scrollmap
	call draw6x4map
	call gscopybuffer
	pop bc
	djnz up2
	ld de,(NBup)
	call mapDatatoRam
	xor a
	dec a
	ret
down:
	ld b,4
down2:
	push bc
	ld a,4
	sub b
	sla a
	ld e,a
	sla a
	add a,e
	set 6,a
	call scrollmap
	call draw6x4map
	call gscopybuffer
	pop bc
	djnz down2
	ld de,(NBdown)
	call mapDatatoRam
	xor a
	dec a
	ret
#endcomment
exit:
	call gsclearbuffer
	call GSdisable			;disable gs
	ld hl,$9d95
	ld de,AllocSize
	bcall(_DelMem)			;deallocate RAM
	res DGFont,(iy + myfontflags)		;older ROM versions don't auto restore flags
	res LGFont,(iy + myfontflags)
	bjump(_JForceCmdNoChar)		;exit

appPutS:						; appsafe _PutS
	ld a,(hl)
	inc hl
	or a
	ret z
	call customPutC
	jr appPutS
	
myString:
	.db [l],[o],[s],[t],[_],[l],[e],[g],[e],[n],[d],[s],0

	;initialize the size file
.echo > sizes.txt "Code and Data Sizes:\n"
	
#include "keyboard.z80"
#include "graylibx.inc"
#include "customfont.z80"
#include "mapper2.z80"
#include "mapget.z80"
#include "sprite.z80"

.echo >>sizes.txt "++OTHER\n"
.echo >>sizes.txt "to allocate:", AllocSize, "\n"
.echo >>sizes.txt "actual size:",$-start, "\n"
.echo >>sizes.txt "Code Space:", keyboardz80code + mapper2z80code + customfontz80code + mapgetz80code + spritez80code + graylibxinccode, "\n"
.echo >>sizes.txt "Data Space:", keyboardz80data + mapper2z80data + customfontz80data + mapgetz80data + spritez80data + graylibxincdata, "\n\n"

;.block ($8000-$)-96			; 96 for signature
validate()
