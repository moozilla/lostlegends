SpriteStart:
;NSpriteMov
;by Jason Lee (Liazon)
;========================================
;a = keyinput results from the keyget routine
NSpriteMov:
	ld de,(ctile)	;load the address to the current tile to de
	ld bc,(py)		;c = py, b = px
	sla b \ sla b \ sla b \ sla b		;*x16 gets pixel coordinates
	sla c \ sla c \ sla c \ sla c		;*x16 gets pixel coordinates
	bit b_right,a
	jr nz,NSpriteMov_right_skip
	ld a,(px)
	cp 5				;check if current x tile # is 5
	jp z,NSpriteMov_right_shift		;go to a block of code that handles shifting the plane
	ld hl,charright
	inc de				;de points to tile to right
	ex de,hl			;switch the two
	bit impabit,(hl)
	jp nz,NSpriteMov_Hori_Zero
	inc a
	ld (px),a			;update px permanently
	ld (ctile),hl		;update current tile permanently
	ld a,aniDelta			;4 PART ANIMATION, animation delta
	call NSpriteMov_LDassist
	jp NSpriteMov_Hori
NSpriteMov_Hori_Zero:
	xor a			;zero delta
	call NSpriteMov_LDassist
	jp NSpriteMov_Hori
NSpriteMov_right_skip:
	bit b_left,a
	jp nz,NSpriteMov_left_skip
	ld a,(px)
	or a				;check if current x # tile is 0
	jp z,NSpriteMov_left_shift			;go to a block to handle plane shifts
	ld hl,charleft
	dec de				;de points to tile to left
	ex de,hl
	bit impabit,(hl)
	jp nz,NSpriteMov_Hori_Zero
	dec a
	ld (px),a
	ld (ctile),hl			;updat px and tile permanently
	ld a,-1*aniDelta
	call NSpriteMov_LDassist
	jp NSpriteMov_Hori
NSpriteMov_left_skip:
	bit b_up,a
	jp nz,NSpriteMov_up_skip
	ld a,(py)
	or a
	jp z,NSpriteMov_up_shift
	ld hl,-6
	add hl,de			;hl looking at tile above
	ld de,charup
	bit impabit,(hl)
	jp nz,NSpriteMov_Vert_Zero
	dec a
	ld (py),a
	ld (ctile),hl
	ld a,-1*aniDelta
	call NSpriteMov_LDassist
	jp NSpriteMov_Vert
NSpriteMov_Vert_Zero:
	xor a
	call NSpriteMov_LDassist
	jp NSPriteMov_Vert
NSpriteMov_up_skip:	
	bit b_down,a
	ret nz
	ld a,(py)
	cp 4			;check if it's already at bottom
	jp z,NSpriteMov_down_shift
	ld hl,$0006
	add hl,de			;hl looking at tile below
	ld de,chardown
	bit impabit,(hl)
	jp nz,NSpriteMov_Vert_Zero
	inc a
	ld (py),a
	ld (ctile),hl
	ld a,aniDelta
	call NSpriteMov_LDassist
NSPriteMov_Vert:	
	push bc
	push hl
	call draw6x4map			;clean slate
	pop hl
	pop bc
	push bc
	bit 0,b			;test if odd/even -> even = second sprite
	jr nz,NSpriteMov_Vert_S
	ld ix,(sanime2Mask)
	ld de,(sanime2)
	ld (gs16maskedsprite),de
	jp NSpriteMov_Vert_S2
NSpriteMov_Vert_S:
	ld ix,(sanime1mask)
	ld de,(sanime1)
	ld (gs16maskedsprite),de
NSpriteMov_Vert_S2:
	ld a,l
	add a,c			;increment the y coordinate
	ld l,a
	ld a,h			;put x in a
	push hl
	ld b,16		;height
	call gs16masked
	call gscopybuffer
	pop hl
	pop bc
	djnz NSpriteMov_Vert
	ret
;========================
;provides assistance by loading the pointers and stuff into right places	
NSpriteMov_LDassist:
	push bc
	ex de,hl			;hl has sprite start
	ld (sanime1),hl
	ld bc,$0040			;64 between start and mask
	add hl,bc			
	ld (sanime1mask),hl
	sra c				;div by 2 so 32
	add hl,bc
	ld (sanime2),hl
	sla c				;mult by 2, back to 64
	add hl,bc
	ld (sanime2mask),hl
	pop hl				;hl has x and y pixel data
	ld c,a
	ld b,numAni				; b = 4 # of animations, c = delta
	ret

NSpriteMov_Hori:
	push bc
	push hl
	call draw6x4map			;clean slate
	pop hl
	pop bc
	push bc
	bit 0,b			;test if odd/even -> even = second sprite
	jr nz,NSpriteMov_Hori_S
	ld ix,(sanime2Mask)
	ld de,(sanime2)
	ld (gs16maskedsprite),de
	jp NSpriteMov_Hori_S2
NSpriteMov_Hori_S:
	ld ix,(sanime1mask)
	ld de,(sanime1)
	ld (gs16maskedsprite),de
NSpriteMov_Hori_S2:
	ld a,c
	add a,h			;increment the x coordinate
	ld h,a
	push hl
	ld b,16		;height
	call gs16masked
	call gscopybuffer
	pop hl
	pop bc
	djnz NSpriteMov_Hori
	ret
	
;a = (px), hl = ??, bc = x,y in pixels, de = (ctile)	
NSpriteMov_right_shift:
	xor a				;zero a
	ld (px),a			;update px permanently
	ld hl, -(5)
	add hl,de			;updating ctile
	ld (ctile),hl
	ld hl,(NBright)		;right node's address
	ld a,h
	or l				;check if it's NULL
	jp z,spriteReturn	;reverse portal handling w/ DEFAULT PORTAL OBJECT
	ld de, charright
	call NSpriteMov_LDassist	;pointers to correct animations have been added
	push hl
	xor a			;scroll it over once
	call scrollmap
	call draw6x4map			;clean slate
	pop hl				;x, y in pixels in hl
	ld a, -(14)
	add a,h				;first shift is -16 + 2 = -14 in x coordinate
	ld h,a				; update hl
	ld b,16				;height
	ld ix,charright2 + 64
	ld de,charright2
	ld (gs16maskedsprite),de	;load mask and sprite in right spot
	push hl				;preserve the coordinates
	call gs16masked		;first animation
	ld b, NumAniS
	ld c, AniSDelta - 16   ;prep the counter and the delta
	pop hl				;restore hl
	;break()
NSpriteMov_right_shift2:
	push bc
	push hl
	ld a, 5 | %0001000				;the amount of tiles to scroll happens to correspond to the number of animations
	sub b
	;or %0001000			;turn on the right direction
	call scrollmap
	call draw6x4map			;clean slate
	pop hl
	pop bc
	push bc	
	bit 0,b			;test if odd/even -> even = second sprite
	jr nz,NSpriteMov_right_shift2x2
	ld ix,(sanime2Mask)
	ld de,(sanime2)
	ld (gs16maskedsprite),de
	jp NSpriteMov_right_shift2x3
NSpriteMov_right_shift2x2:
	ld ix,(sanime1mask)
	ld de,(sanime1)
	ld (gs16maskedsprite),de
NSpriteMov_right_shift2x3:
	ld a,c
	add a,h			;increment the x coordinate
	ld h,a
	push hl
	ld b,16		;height
	call gs16masked
	call gscopybuffer
	pop hl
	pop bc
	;break()
	djnz NSpriteMov_right_shift2
	;break()
	push hl
	ld a,5
	call scrollmap
	call draw6x4map
	pop hl
	ld a, -(14)
	add a,h				;last shift is -16 + 3 = -14 in x coordinate
	ld h,a				; update hl
	ld b,16				;height
	ld ix,charright + 64
	ld de,charright
	ld (gs16maskedsprite),de	;load mask and sprite in right spot
	call gs16masked
	call gscopybuffer
	ld de,(NBright)
	call mapDatatoRam			;retrieve correct object data
	ret		
;do the last animation
;works ok, but too FAST!!!!!!	
	
	
	
NSpriteMov_left_shift:
NSpriteMov_up_shift:
NSpriteMov_down_shift:
ret

;de points to the incoming map section
;========================================
;(px), (py), (ctile) will get updated correctly
;LOTS OF WORK ON THIS IN THE FUTURE!!
;NEED TO HANDLE OBJECT SCANS BEFORE checking for impassability
spriteReturn:
	call mapdatatoRam
	call draw6x4map
	ld a,(NBObjStart)			;by default, default position is first object!!!
	ld e,a
	and %00001111			;mask out the x
	ld (py),a
	ret

;gs16masked
;by Jason Lee (Liazon)
;========================================
;ix = sprite mask pointer
;a = x
;l = y
;b = height
;gstempsprite = used for scrolling storage
;gstempsprite + 1 = sprite pointer (gs16maskedsprite)
;uses ASMFlag1 bit 1
;sprites arranged like so
;dark layer
;light layer
;mask layer
;DESTROYS VIRTUALLY EVERYTHING!
;=========================================
;might modify later to calculate location of mask based on height
gs16masked:
	set gs16maskedflag,(iy + mygfxflags)
	ld e,l			;l and e have "y"
	ld h,0
	ld d,h
	add hl,de		;*2
	add hl,de		;*3	
	add hl,hl		;*6
	add hl,hl		;*12	
	ld e,a
	and $07			;a holds the number of bits to shift
	ld (gs16maskedwidth),a			;save number of bits to shift in temp RAM
	srl e			;/2
	srl e			;/4
	srl e			;/8
	add hl,de		;hl = y*12; de = x rounded <- add to get screenbuffer offset
	ex de,hl
	ld hl,gbuf2	
	add hl,de		;address on light layer
	push bc			;save the height for second round
	push hl			;save light layer address for second round (sprite not mask)
	ld hl,gbuf1
	add hl,de
	push bc
	push hl
gs16masked_L1:
	push hl			;save dark layer address
	ld de,gbuf2-gbuf1
	add hl,de		;dark layer address
		ld d,(ix)	;using massive dec register
		inc ix
		ld e,(ix)
		ld c,$FF		;zero out b for AND LOGIC!!!
		ld a,(gs16maskedwidth)
		or a		;cp 0
		jr z,gs16masked_DMask
		scf			;set carry
gs16masked_shiftMask:
		rr d		;shifting to the right -> destroyed bit goes into carry
		rr e		;shifting to the right -> destroyed bit goes into carry
		rr c		;shifting to the right
		dec a
		jr nz, gs16masked_shiftMask
gs16masked_DMask:	;AND LOGIC!!!!
        ld   a,(hl)   ;graphbyte in a (DARK LAYER)
        and   d      ;AND first byte
        ld   (hl),a   ;back to buffer
        inc   hl      ;increase pointer
        ld   a,(hl)   ;graphbyte in a
        and   e      ;AND second byte
        ld   (hl),a   ;back to buffer
		inc hl
		ld a,(hl)
		and c
		ld (hl),a
		pop hl			;repeat for light layer
		ld   a,(hl)   ;graphbyte in a (LIGHT LAYER)
        and   d      ;AND first byte
        ld   (hl),a   ;back to buffer
        inc   hl      ;increase pointer
        ld   a,(hl)   ;graphbyte in a
        and   e      ;AND second byte
        ld   (hl),a   ;back to buffer
		inc hl
		ld a,(hl)
		and c
		ld (hl),a
        inc   ix      ;increase sprite adress
		ld de,10		
		add hl,de		;next row of light layer
	djnz gs16masked_L1
	ld ix,(gs16maskedsprite)		;give ix the pointer to the sprite
gs16masked_L3:
	pop hl
	pop bc
gs16masked_L2:
		ld d,(ix)	;using massive dec register
		inc ix
		ld e,(ix)
		ld c,$00		;zero out c for XOR LOGIC!!!
		ld a,(gs16maskedwidth)
		or a		;cp 0
		jr z,gs16masked_DMask2
gs16masked_shiftMask2:
		srl d		;shifting to the right -> destroyed bit goes into carry
		rr e		;shifting to the right -> destroyed bit goes into carry
		rr c		;shifting to the right
		dec a
		jr nz, gs16masked_shiftMask2
gs16masked_DMask2:	;XOR LOGIC!!!!
        ld   a,(hl)   ;graphbyte in a (DARK LAYER)
        XOR   d      ;XOR first byte
        ld   (hl),a   ;back to buffer
        inc   hl      ;increase pointer
        ld   a,(hl)   ;graphbyte in a
        XOR   e      ;XOR second byte
        ld   (hl),a   ;back to buffer
		inc hl
		ld a,(hl)
		XOR c
		ld (hl),a
        inc   ix      ;increase sprite adress
		ld de,10		;12
		add hl,de		;next row of light layer
	djnz gs16masked_L2
	bit gs16maskedflag,(iy + mygfxflags)
	jr z,gs16masked_exit
	res gs16maskedflag,(iy + mygfxflags)
	jr gs16masked_L3
gs16masked_exit:
	ret
SpriteTiles:
;sprites currently arranged down, up, right, left w/ animation 1 followed by animation 2	
#include "charsprite.inc"
SpriteEnd:
#define Spritez80size SpriteEnd - SpriteStart
#define Spritez80data SpriteEnd - SpriteTiles
#define Spritez80code Spritetiles - Spritestart
.echo >>sizes.txt "++sprite.z80\n"
.echo >>sizes.txt "Sprite.inc size:", Spritez80size, "\n"
.echo >>sizes.txt "Sprite.inc data:", Spritez80data, "\n"
.echo >>sizes.txt "Sprite.inc code:", Spritez80code, "\n\n"