.nolist
#include "ti83plus.inc"
.list
.org	$9D93	; 9D95-2 because of following db
	.db	t2ByteTok, tAsmCmp

;	Displays a 16x16 Masked Sprite

vanske_dir .equ AppBackUpScreen		;0=down 2=up 4=left 6=right
vanske_frame .equ AppBackUpScreen+1	;for now assume 0=first frame 1=next frame
vanske_x .equ AppBackUpScreen+2		;duh
vanske_y .equ AppBackUpScreen+3

	b_call(_RunIndicOff)
	ld hl,vanske_dir
	xor a
	ld (hl),a
	inc hl
	ld (hl),a
	inc hl
	ld (hl),a
	inc hl
	ld (hl),a	;setup initial values
mainloop:
	b_call(_GrBufClr)
	ld hl,vanske_dir
	ld a,(hl)
	inc hl
	add a,(hl)

	ld c,a		;will be l

	inc hl
	ld a,(hl)	;x
	inc hl
	ld e,(hl)	;y

	ld h,0
	ld l,c
	add hl,hl
	add hl,hl
	add hl,hl
	add hl,hl
	add hl,hl
	add hl,hl	;*64
	ex de,hl
	ld ix,s_vanske
	add ix,de

	call drawSprite
	b_call(_GrBufCpy)
	ld c,1
kloop:
	ld a,$bf
	out (c),a
	nop
	nop	;delay
	in a,(c)
	cp $bf		;mode
	ret z
	ld a,$fe
	out (c),a
	nop
	nop	;delay
	in a,(c)
	cp $fe
	jr z,down
	cp $fd
	jr z,left
	cp $fb
	jr z,right
	cp $f7
	jr z,up
	jr kloop
left:
	ld hl,vanske_dir
	ld (hl),4
	inc hl
	ld a,(hl)
	xor 1
	ld (hl),a	;toggle frame
	inc hl
	dec (hl)	;increment x
	jr mainloop
right:
	ld hl,vanske_dir
	ld (hl),6
	inc hl
	ld a,(hl)
	xor 1
	ld (hl),a	;toggle frame
	inc hl
	inc (hl)	;increment x
	jr mainloop
up:
	ld hl,vanske_dir
	ld (hl),2
	inc hl
	ld a,(hl)
	xor 1
	ld (hl),a	;toggle frame
	inc hl
	inc hl
	dec (hl)	;increment x
	jr mainloop
down:
	ld hl,vanske_dir
	ld (hl),0
	inc hl
	ld a,(hl)
	xor 1
	ld (hl),a	;toggle frame
	inc hl
	inc hl
	inc (hl)	;increment x
	jp mainloop

drawSprite:
	;In: ix=sprite; ix+32=mask; a=x, l=y

	ld c,16
	ld h,0
	ld d,h
	ld e,l
	add hl,hl
	add hl,de
	add hl,hl
	add hl,hl	; y*12

	ld e,a
	srl e
	srl e
	srl e
	add hl,de	; add bytes for x

	ld de,PlotSScreen
	add hl,de

	and 7
	jr z,ds_aligned

	ld b,a
ds_rloop:
	push bc	; store b for next time
	push hl
	ld h,(ix)
	ld d,(ix+32)
	inc ix
	ld c,(ix)
	ld e,(ix+32)
	inc ix
	xor a
	ld l,$FF
ds_loop:
	srl h	; byte that gets pushed over will in carry (will be b)
	rr c	; puts carry into first byte
	rra	; carry into third byte (will be h)
	scf	; set carry so a one will shift into mask
	rr d
	rr e
	rr l
	djnz ds_loop
	ld b,h
	ld h,a
	ex (sp),hl
	ld a,(hl)
	and d
	or b
	ld (hl),a
	inc hl
	ld a,(hl)
	and e
	or c
	ld (hl),a
	inc hl
	pop de
	ld a,(hl)
	and e
	or d
	ld (hl),a
	ld de,10
	add hl,de
	pop bc
	dec c
	jr nz,ds_rloop
	ret
ds_aligned:
	;In: ix=sprite; ix+32=mask; hl=plotsscreen offset;
	ld b,c
	ld de,11
ds_aloop:
	ld a,(ix+32)
	and (hl)
	or (ix)
	ld (hl),a
	inc ix
	inc hl
	ld a,(ix+32)
	and (hl)
	or (ix)
	ld (hl),a
	inc ix
	add hl,de
	djnz ds_aloop
	ret
	

#include "sprites.z80"

.end
.end