;Code conventions:
;routinename + number for sub labels
;p_name and b_name for pointers and buffer pointers
 	.nolist
#include "spasm.inc"
	.list

defpage(0,"LLegends")

	jp start

appPutS:						; appsafe _PutS
	ld a,(hl)
	inc hl
	or a
	ret z
	call customPutC
	jr appPutS
;USE FOR BCALLING ROUTINES
;pagedcallname: 
; .dw address_of_routine
; .db address_of_routine>>16
;USE FOR BCALLING ROUTINES

start:
	bcall(_ClrLCDFull)
	ld hl,AllocSize
	bcall(_EnoughMem)
	jr nc, Go
	bjump(_JForceCmdNoChar)
Go:
	ld de,$9d95
	ld hl,AllocSize
	bcall(_InsertMem)
	call GSenable
	
	call gsclearbuffer
	ld hl,savesscreen
	ld (hl),$FF
	ld de,savesscreen+1
	ld bc,768
	ldir
	
	set textscrolled,(iy + textflags)
	ld hl,$00
	ld (currow),hl
	ld hl,myString
	call appPutS
	res textscrolled,(iy+textflags)
	
	call gscopybuffer
this:
	call gsgetk
	or a
	jr z,this
	call GSdisable
	ld hl,$9d95
	ld de,AllocSize
	bcall(_DelMem)	
	bjump(_JForceCmdNoChar)
myString:
	.db 24,27,31,32,39,24,17,19,17,26,16,31,0
#comment
Keyloop:
	nop
	nop
	ld a,$FF
	out (1),a
	nop
	nop
	nop
	nop
	ld a,$80
	out (1),a
	nop
	nop
	nop
	nop
	nop
	nop
	in a,(1)
	inc a
	jr z,Keyloop
	ld a,$FF
	out (1),a
	nop
	nop
	nop
	nop
	ld a,$FE
	out (1),a
	nop
	nop
	nop
	nop
	nop
	nop
	in a,(1)
	bit 0,a
	call z,down
	bit 1,a
	call z,left
	bit 2,a
	call z,right
	bit 3,a
	call z,up

	ld a,$FF
	out (1),a
	nop
	nop
	nop
	nop
	ld a,$BF
	out (1),a
	nop
	nop
	nop
	nop
	nop
	nop
	in a,(1)
	ld hl,(delta)	;this just changes  the scroll speed with the F keys
	bit 0,a
	jr nz,$+2+3
	ld hl,8
	bit 1,a
	jr nz,$+2+3
	ld hl,6
	bit 2,a
	jr nz,$+2+3
	ld hl,4
	bit 3,a
	jr nz,$+2+3
	ld hl,2
	bit 4,a
	jr nz,$+2+3
	ld hl,1
	ld (delta),hl

	bit 5,a			;2nd turns SE speed on
	jr nz,skipspeedon
	in a,(2)
	rla
	jr nc,skipspeedon
	ld a,1
	out ($20),a
	ld a,$FF
skipspeedon:
	bit 6,a			;mode turns SE speed off
	jr nz,skipspeedoff
	in a,(2)
	rla
	jr nc,skipspeedoff
	xor a
	out ($20),a
	ld a,$FF
skipspeedoff:

	ld a,$FF
	out (1),a
	ld a,$FD
	out (1),a
	nop
	nop
	in a,(1)
	bit 6,a			;CLEAR = quit
	jp nz,loop
	call GSdisable
	
	ld hl,$9d95
	ld de,AllocSize
	bcall(_DelMem)	
	
	bjump(_JForceCmdNoChar)


down:
	ld hl,(mapY)	
	ld de,(delta)
	add hl,de
	
	ld bc,256
	or a
	sbc hl,bc
	add hl,bc
	jr c,down2 
	ld hl,256
down2:	
	ld (mapY),hl
	ret
up:
	ld hl,(mapY)
	ld de,(delta)
	or a
	sbc hl,de
	
	ld bc,256
	or a
	sbc hl,bc
	add hl,bc
	jr c,up2 
	ld hl,$0000
up2:		
	ld (mapY),hl
	ret
right:
	ld hl,(mapx)
	ld de,(delta)eez, my 
	add hl,de
	
	ld bc,384
	or a
	sbc hl,bc
	add hl,bc
	jr c,right2 
	ld hl,384
right2:	
	ld (mapx),hl
	ret
left:
	ld hl,(mapx)
	ld de,(delta)
	or a
	sbc hl,de
	
	ld bc,384
	or a
	sbc hl,bc
	add hl,bc
	jr c,left2 
	ld hl,$0000
left2:	
	ld (mapx),hl
	ret
#endcomment
	
#include "customfont.z80"

;----------
;quick copy
;copies from hl to de for bc quickly
;hl source
;de destination
;bc bytes to copy (MUST BE ROUND WITH 16)
;basically a fster ldir
quickcopy:
	ldi \ ldi \ ldi \ ldi
	ldi \ ldi \ ldi \ ldi
	ldi \ ldi \ ldi \ ldi
	ldi \ ldi \ ldi \ ldi
	jp pe,quickcopy
	ret

#include "graylib2.inc"
;RGP ram
gsmasknum	= $9d95
GSapppage	= gsmasknum + 1
skip83	= GSapppage + 1
stacksave	= skip83 + 1
gs_keymem	= stacksave + 2
frame_count	= gs_keymem + 1
gsTempSprite = frame_count + 1
gsTempSprite2 = gsTempSprite 
gsActivebuf1  = gsTempSprite + 16
gsActivebuf2  = gsActivebuf1 + 768
gsRamEnd	  = gsActivebuf2 + 768
GsRamSize	  = gsRamEnd - gsmasknum

AllocSize	= gsRamEnd - gsmasknum

.echo "to allocate:", AllocSize
	
.block ($8000-$)-96			; 96 for signature

validate()