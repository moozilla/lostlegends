LIST
========================================
keyget	(keyboard.z80)
mapDatatoRAM (mapget.z80)
scrollmap	(mapget.z80)
gs16masked	(sprite.z80)
NSpriteMov	(sprite.z80)
haltdraw	(sprite.z80)
haltdrawloop	(sprite.z80)
customPutC (customfont.z80)
draw6x4map (mapper2.z80)
DExA	(mapper2.z80)
calcCtile (mapget.z80)
obj_findfirst	(objmap.z80)
tile_analyze	(objmap.z80)

Obj_findfirst
========================================
c register contains the object type we are looking for.
hl = starting point for search
a = number of objects left to search
outputs hl = node of interest
outputs carry flag if not found

CalcCTile
by Jason Lee (Liazon)
========================================
hl is the base address of the map
(px) and (py) used
a, bc, hl, de used	
(ctile) has the current tile based on (px) and (py)
hl has (ctile)

keyget
by Jason Lee (Liazon)
=============================================
for convenience, returns only y=, 2nd, mode, del, and arrows in the right spots
other F2-5 keys are ignored and masked out
the number of nops right now are for SE convenience
subject to change. also might change to more efficient ways of wasting time without wasting space
returns a = byte holding bits corresponding to down, left, right, up, y=, 2nd, mode, del
ix is destroyed!!

mapget.z80
by Jason Lee (Liazon)
=====================================================
routines to handle the transfer of maps to the map entry buffer
map nodes must be stored on the same page as these routines!!

mapDatatoRAM
by Jason Lee (Liazon)
=====================================================
de = pointer to node to be transfered into the NBuf region
DESTROYS ALL!

scrollmap
by Jason Lee (Liazon)
=====================================================
a = direction bits{7, 6, 5, no bits} respectively for up, down, left, right
a {bits 4-0} = amount of shift (starting row or column)
0 - 5 for columns
0, 6, 12, 18 for rows
JUST MAKE SURE YOU CHECK YOUR LOOPING METHOD WHEN USING THESE!!!!!

gs16masked
by Jason Lee (Liazon)
========================================
ix = sprite mask pointer
a = x
l = y
b = height
gstempsprite + 1 = sprite pointer!!!!	(gs16maskedsprite)

gstempsprite = used for scrolling storage
uses ASMFlag1 bit 1
sprites arranged like so
dark layer
light layer
mask layer
DESTROYS VIRTUALLY EVERYTHING!
=========================================
might modify later to calculate location of mask based on height

=======================================
customPutC
using gsalignedsprite by James Montelengo (Jim e)
modified by Jason Lee (Liazon)
------
curRow = x (0-11), curCol = y (0-7) in aligned characters
a = index of character to be displayed + 1 (0x00 is the terminator)
DGFont SET = dark gray text
LGFont SET = light gray text
BOTH SET = blank 8x8 aligned tile.

Important!
Destroys everything except hl
curRow and curCol are updated!!
Since almost all text appears as aligned tiles that mask out what's underneath,
I didn't both with masking with these.

Other Notes:
72 characters in the custom font.
Uses 8x8 characters
Use modified AlignedMaskSprite to get job done
=======================================
I figured that since it's an APP, we've got plenty of space now
It's more important to get working code, then optimize down from there.
Custom character set seemed like a good idea because it'd be a lot easier.
If I haven't done so already, I'll write some kind of java file parser thing
to convert strings to this custom charset.

mapper2.z80
by Jason Lee (Liazon)
===============================================
new rewrite using new map system
As always, $0000 is null

struct{
boolean impassable
byte:7 tilenumber
}tileEntry

struct{
tileEntry map[6][4]  //that's [x][y]
word {up, down, left, right} //pointer to up, down, left, right nodes respectively
//object space
byte num_Objects //number of object entries following this
}mapNode

draw6x4map
by Jason Lee (Liazon)
=====================================================
draws the mapWxmapH (6x4) map of 16x16 tiles @ NBmap to the backbuffers
equates are as defined in the .inc
at the section labeled "LOOK AT ME!" the MSB is masked out so that it can be used for hit detection

DExA
From Sigma's ASMin28
======================================================
outputs: b = 0; de destroyed; a destroyed
hl = de x a
