;mapget.z80
;by Jason Lee (Liazon)
;=====================================================
;routines to handle the transfer of maps to the map entry buffer
;map nodes must be stored on the same page as these routines!!

;CalcCTile
;by Jason Lee (Liazon)
;========================================
;hl is the base address of the map
;(px) and (py) used
;a, bc, hl, de used	
;(ctile) has the current tile based on (px) and (py)
;hl has (ctile)
CalcCTile:
	push hl
	ld a,(py)
	ld e,a
	ld d,0
	ld a,6
	call DExA
	ld a,(px)
	ld c,a
	add hl,bc
	pop de
	add hl,de
	ld (ctile),hl
	ret

;mapDatatoRAM
;by Jason Lee (Liazon)
;=====================================================
;de = pointer to node to be transfered into the NBuf region
;DESTROYS ALL!
mapDatatoRAM:
	ld h,d \ ld l,e			;copy the address to hl
	ld bc, NConstSize		;should be 33
	add hl,bc				;hl points to the number of objects
	ld a,(hl)				;a holds the number of objects in the new node
	sla a \ sla a 			;multiply by 4, which is the current OBJsize -> use DExA if this changes
	ld c,a					;b SHOULD be 0 btw
	ld hl,NConstSize
	add hl,bc				;hl is the number of bytes to transfer
	ld b,h \ ld c,l			;bc holds the number of bytes to transfer
	ex de,hl				;switch so hl is now at the beginning of the new node
	ld de,Nodebuf			;de points to destination
	ldir					;data transfer
	ret

;scrollmap
;by Jason Lee (Liazon)
;=====================================================
;a = direction bits{7, 6, 5, no bits} respectively for up, down, left, right
;a {bits 4-0} = amount of shift/starting row/column
;0 - 5 for columns
;0, 6, 12, 18 for rows
;JUST MAKE SURE YOU CHECK YOUR LOOPING METHOD WHEN USING THESE!!!!!
scrollmap:
	ld bc, $0012			;for vertical shifts, that' 3 rows * 6, so 18
	bit 7,a
	jr nz,scrollmap_up
	bit 6,a
	jr nz,scrollmap_down
	ld bc, $0017			;for horizontal column shifts
	bit 5,a
	jr nz,scrollmap_left
scrollmap_right:
	ld hl,NBmap + 1			;we're going to start from the top
	ld de,NBmap
	ldir					;so the right edges are "trash bytes"			
	ld de,(NBright)				;de points to the next node
	ld hl,NBmap + mapW - 1		;right end of the row
	jr scrollmap_pre_vertinsert
scrollmap_left:
	ld hl,NBmap + 22
	ld de,NBmap + 23
	lddr			
	ld de,(NBleft)			;de points to the next node
	ld hl,NBmap				;left end of the row
scrollmap_pre_vertinsert:
	ex de,hl				;hl points to next node
	ld b,0
	and %00000111			;flags removed
	ld c,a
	add hl,bc				;hl points to correct column
	ld b,mapH				;4 rows for counter
scrollmap_vertinsert:		;de is now the destination
	ld a,(hl)
	ld (de),a
	ld a,b			;save counter
	push de			;save NB pointer in the node buffer
	ld de,mapW		;add 6
	add hl,de		;hl has new ROM pointer
	ex de,hl		;de has new ROM pointer
	pop bc
	add hl,bc		;hl has new NB pointer
	ex de,hl
	ld b,a			;restore counter
	djnz scrollmap_vertinsert
	ret
scrollmap_up:
	ld hl,NBmap + 23 - mapW		;that's +6 next row
	ld de,NBmap + 23
	lddr			
	ld de,(NBup)			;de points to upward node
	ld hl,NBmap
	jr scrollmap_hortinsert
scrollmap_down:
	ld hl,NBmap + mapW		
	ld de,NBmap
	ldir			
	ld de,(NBdown)			;de points to upward node
	ld hl,NBmap + 18
scrollmap_hortinsert:
	ex de,hl
	ld b,0
	and %00011111
	ld c,a
	add hl,bc				;hl points to correct row
	ld bc,$0006
	ldir					;transfer row
	ret
	
#include "node_grendale_castle.inc"
	
;data for map entries should go here... after the mapget routine
;next nodes: up,down,left,right
samplemap:
	.db $08,$08,$08,$08,$08,$08
	.db $08,$1D,$1B,$1A,$1B,$08
	.db $08,$02,$02,$02,$02,$08
	.db $08,$08,$08,$0E,$08,$08
	.dw samplemapright
	.dw samplemapright
	.dw samplemapright
	.dw samplemapright
	.db 0

samplemapright:
	.db $08,$0C,$1F,$20,$0C,$08
	.db $0C,$0D,$21,$22,$0D,$0C
	.db $0D,$1B,$02,$02,$1B,$0D
	.db $23,$02,$02,$02,$02,$24
	.dw samplemap
	.dw samplemap
	.dw samplemap
	.dw samplemap
	.db 0
	